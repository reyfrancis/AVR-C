
pinmode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ac  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b2  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000280  00000000  00000000  00001192  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041a  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001aa  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	25 00       	.word	0x0025	; ????
  6e:	28 00       	.word	0x0028	; ????
  70:	2b 00       	.word	0x002b	; ????

00000072 <_ZL16port_to_mode_PGM>:
  72:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000007c <_ZL23digital_pin_to_port_PGM>:
  7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  8c:	03 03 03 03                                         ....

00000090 <_ZL27digital_pin_to_bit_mask_PGM>:
  90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  a0:	04 08 10 20                                         ... 

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  b4:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <_Z7pinModehh>:
};

void pinMode(uint8_t pin, uint8_t mode);

void pinMode(uint8_t pin, uint8_t mode)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	e0 57       	subi	r30, 0x70	; 112
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
  ca:	fc 01       	movw	r30, r24
  cc:	e4 58       	subi	r30, 0x84	; 132
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
  d2:	88 23       	and	r24, r24
  d4:	79 f1       	breq	.+94     	; 0x134 <_Z7pinModehh+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	fc 01       	movw	r30, r24
  de:	ee 58       	subi	r30, 0x8E	; 142
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	a5 91       	lpm	r26, Z+
  e4:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
  e6:	fc 01       	movw	r30, r24
  e8:	e8 59       	subi	r30, 0x98	; 152
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	c5 91       	lpm	r28, Z+
  ee:	d4 91       	lpm	r29, Z

	if (mode == INPUT) {
  f0:	61 11       	cpse	r22, r1
  f2:	0c c0       	rjmp	.+24     	; 0x10c <_Z7pinModehh+0x50>
		uint8_t oldSREG = SREG;
  f4:	9f b7       	in	r25, 0x3f	; 63
		cli();
  f6:	f8 94       	cli
		*reg &= ~bit;
  f8:	8c 91       	ld	r24, X
  fa:	e2 2f       	mov	r30, r18
  fc:	e0 95       	com	r30
  fe:	8e 23       	and	r24, r30
 100:	8c 93       	st	X, r24
		*out &= ~bit;
 102:	28 81       	ld	r18, Y
 104:	e2 23       	and	r30, r18
 106:	e8 83       	st	Y, r30
		SREG = oldSREG;
 108:	9f bf       	out	0x3f, r25	; 63
 10a:	14 c0       	rjmp	.+40     	; 0x134 <_Z7pinModehh+0x78>
		} else if (mode == INPUT_PULLUP) {
 10c:	62 30       	cpi	r22, 0x02	; 2
 10e:	61 f4       	brne	.+24     	; 0x128 <_Z7pinModehh+0x6c>
		uint8_t oldSREG = SREG;
 110:	9f b7       	in	r25, 0x3f	; 63
		cli();
 112:	f8 94       	cli
		*reg &= ~bit;
 114:	8c 91       	ld	r24, X
 116:	32 2f       	mov	r19, r18
 118:	30 95       	com	r19
 11a:	83 23       	and	r24, r19
 11c:	8c 93       	st	X, r24
		*out |= bit;
 11e:	e8 81       	ld	r30, Y
 120:	e2 2b       	or	r30, r18
 122:	e8 83       	st	Y, r30
		SREG = oldSREG;
 124:	9f bf       	out	0x3f, r25	; 63
 126:	06 c0       	rjmp	.+12     	; 0x134 <_Z7pinModehh+0x78>
		} else {
		uint8_t oldSREG = SREG;
 128:	8f b7       	in	r24, 0x3f	; 63
		cli();
 12a:	f8 94       	cli
		*reg |= bit;
 12c:	ec 91       	ld	r30, X
 12e:	e2 2b       	or	r30, r18
 130:	ec 93       	st	X, r30
		SREG = oldSREG;
 132:	8f bf       	out	0x3f, r24	; 63
	}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		pinMode(13, OUTPUT);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	8d e0       	ldi	r24, 0x0D	; 13
 13e:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z7pinModehh>
 142:	fb cf       	rjmp	.-10     	; 0x13a <main>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
