
BlinkMany.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000942  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003da  00000000  00000000  00001279  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001c49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <LED1>:
		
    }
}

	void LED1() {
		DDRD &= ~(1 << PORTD2);   // Set Port Pin D2 as Input
  80:	52 98       	cbi	0x0a, 2	; 10
		---------- (AND)
		0bxxxxx0xx	
		*/
		
		
		DDRD |= (1 << PORTD3);   // Set Port Ping D3 as Output
  82:	53 9a       	sbi	0x0a, 3	; 10
		0b00001000
		---------- (OR)
		0bxxxx1xxx	
		*/
		
		PORTD &= ~(1 << PORTD3);   // Set Port Pin D3 as active LOW
  84:	5b 98       	cbi	0x0b, 3	; 11
		---------- (AND)
		0bxxxx0xxx	
		*/
		
		
		PORTD |= (1 << PORTD4);   // Set Port Pin D4 as active HIGH
  86:	5c 9a       	sbi	0x0b, 4	; 11
  88:	08 95       	ret

0000008a <LED2>:
		0bxxx1xxxx	
		*/
	}
	
	void LED2() {
		PORTD |= (1 << PORTD3);
  8a:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1 << PORTD4);
  8c:	5c 98       	cbi	0x0b, 4	; 11
  8e:	08 95       	ret

00000090 <LED3>:
	}

	void LED3() {
		DDRD &= ~(1 << PORTD4);
  90:	54 98       	cbi	0x0a, 4	; 10
		DDRD |= (1 << PORTD2);
  92:	52 9a       	sbi	0x0a, 2	; 10
		PORTD &= ~(1 << PORTD2);
  94:	5a 98       	cbi	0x0b, 2	; 11
		PORTD |= (1 << PORTD3);	
  96:	5b 9a       	sbi	0x0b, 3	; 11
  98:	08 95       	ret

0000009a <LED4>:
	}

	void LED4() {
		PORTD |= (1 << PORTD2);
  9a:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &= ~(1 << PORTD3);	
  9c:	5b 98       	cbi	0x0b, 3	; 11
  9e:	08 95       	ret

000000a0 <LED5>:
	}
	
	void LED5() {
		DDRD &= ~(1 << PORTD3);
  a0:	53 98       	cbi	0x0a, 3	; 10
		DDRD |= (1 << PORTD4);
  a2:	54 9a       	sbi	0x0a, 4	; 10
		PORTD &= ~(1 << PORTD2);
  a4:	5a 98       	cbi	0x0b, 2	; 11
		PORTD |= (1 << PORTD4);
  a6:	5c 9a       	sbi	0x0b, 4	; 11
  a8:	08 95       	ret

000000aa <LED6>:
	}
	
	void LED6() {
		PORTD |= (1 << PORTD2);
  aa:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &= ~(1 << PORTD4);
  ac:	5c 98       	cbi	0x0b, 4	; 11
  ae:	08 95       	ret

000000b0 <main>:
void LED5(void);
void LED6(void);
void OFFLED(void);

int main(void) {
	DDRD |= (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4);   //Make Port Pin D2, D3, D4 as outputs
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8c 61       	ori	r24, 0x1C	; 28
  b4:	8a b9       	out	0x0a, r24	; 10
	0bxxx111xx 
	
	Hence, we set the three pins without affecting others.
	*/
	
	PORTD &= ~(1 << PORTD2) & ~(1 << PORTD3) & ~(1 << PORTD4);   // Set Port Pin D2, D3, D4 active LOW
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	83 7e       	andi	r24, 0xE3	; 227
  ba:	8b b9       	out	0x0b, r24	; 11
	0bxxx000xx 
	*/


    while (1) {
		LED1();
  bc:	0e 94 40 00 	call	0x80	; 0x80 <LED1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x16>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x20>
  d0:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		LED2();
  d2:	0e 94 45 00 	call	0x8a	; 0x8a <LED2>
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	89 e6       	ldi	r24, 0x69	; 105
  da:	98 e1       	ldi	r25, 0x18	; 24
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x2c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x36>
  e6:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		LED3();
  e8:	0e 94 48 00 	call	0x90	; 0x90 <LED3>
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	89 e6       	ldi	r24, 0x69	; 105
  f0:	98 e1       	ldi	r25, 0x18	; 24
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x42>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x4c>
  fc:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		LED4();
  fe:	0e 94 4d 00 	call	0x9a	; 0x9a <LED4>
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	89 e6       	ldi	r24, 0x69	; 105
 106:	98 e1       	ldi	r25, 0x18	; 24
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x58>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x62>
 112:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		LED5();
 114:	0e 94 50 00 	call	0xa0	; 0xa0 <LED5>
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	89 e6       	ldi	r24, 0x69	; 105
 11c:	98 e1       	ldi	r25, 0x18	; 24
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x6e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x78>
 128:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		LED6();
 12a:	0e 94 55 00 	call	0xaa	; 0xaa <LED6>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x84>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x8e>
 13e:	00 00       	nop
		PORTD |= (1 << PORTD2);
		PORTD &= ~(1 << PORTD4);
	}
	
	void OFFLED() {
		PORTD = 0x00;
 140:	1b b8       	out	0x0b, r1	; 11
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	89 e6       	ldi	r24, 0x69	; 105
 146:	98 e1       	ldi	r25, 0x18	; 24
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x98>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xa2>
 152:	00 00       	nop
 154:	b3 cf       	rjmp	.-154    	; 0xbc <main+0xc>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
