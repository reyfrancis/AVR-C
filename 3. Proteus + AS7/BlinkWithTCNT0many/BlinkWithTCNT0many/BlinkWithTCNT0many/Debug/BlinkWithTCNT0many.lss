
BlinkWithTCNT0many.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f4  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000695  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036f  00000000  00000000  000011d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f7  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000019eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	b9 00       	.word	0x00b9	; ????
  6a:	c0 00       	.word	0x00c0	; ????
  6c:	c7 00       	.word	0x00c7	; ????
  6e:	ce 00       	.word	0x00ce	; ????
  70:	d5 00       	.word	0x00d5	; ????
  72:	dc 00       	.word	0x00dc	; ????
  74:	e3 00       	.word	0x00e3	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e2 ee       	ldi	r30, 0xE2	; 226
  8a:	f1 e0       	ldi	r31, 0x01	; 1
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a2 e0       	ldi	r26, 0x02	; 2
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 81 00 	call	0x102	; 0x102 <main>
  ac:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_14>:
void LED4(void);
void LED5(void);
void OFFLED(void);


ISR(TIMER0_COMPA_vect) {
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
    t10msFlag = 1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <LED0>:
    }/* End while(1) */
}/* End int main(void) */


void LED0() {
	DDRD &= ~(1 << PORTD2);
  d2:	52 98       	cbi	0x0a, 2	; 10
	DDRD |= (1 << PORTD3);
  d4:	53 9a       	sbi	0x0a, 3	; 10
	PORTD &= ~(1 << PORTD3);
  d6:	5b 98       	cbi	0x0b, 3	; 11
	PORTD |= (1 << PORTD4);
  d8:	5c 9a       	sbi	0x0b, 4	; 11
  da:	08 95       	ret

000000dc <LED1>:
}

void LED1() {
	PORTD |= (1 << PORTD3);
  dc:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD &= ~(1 << PORTD4);
  de:	5c 98       	cbi	0x0b, 4	; 11
  e0:	08 95       	ret

000000e2 <LED2>:
}

void LED2() {
	DDRD &= ~(1 << PORTD4);
  e2:	54 98       	cbi	0x0a, 4	; 10
	DDRD |= (1 << PORTD2);
  e4:	52 9a       	sbi	0x0a, 2	; 10
	PORTD &= ~(1 << PORTD2);
  e6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD |= (1 << PORTD3);	
  e8:	5b 9a       	sbi	0x0b, 3	; 11
  ea:	08 95       	ret

000000ec <LED3>:
}

void LED3() {
	PORTD |= (1 << PORTD2);
  ec:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD &= ~(1 << PORTD3);	
  ee:	5b 98       	cbi	0x0b, 3	; 11
  f0:	08 95       	ret

000000f2 <LED4>:
}

void LED4() {
	DDRD &= ~(1 << PORTD3);
  f2:	53 98       	cbi	0x0a, 3	; 10
	DDRD |= (1 << PORTD4);
  f4:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~(1 << PORTD2);
  f6:	5a 98       	cbi	0x0b, 2	; 11
	PORTD |= (1 << PORTD4);
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	08 95       	ret

000000fc <LED5>:
}

void LED5() {
	PORTD |= (1 << PORTD2);
  fc:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD &= ~(1 << PORTD4);
  fe:	5c 98       	cbi	0x0b, 4	; 11
 100:	08 95       	ret

00000102 <main>:


int main(void)
{

    TCCR0A = 0b00000010;  // Set the mode to CTC
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 0b00000101;   // Set the pre scaler to clk/1024
 106:	95 e0       	ldi	r25, 0x05	; 5
 108:	95 bd       	out	0x25, r25	; 37
    OCR0A = 155;   // F_CPU/1024/100 - 1
 10a:	9b e9       	ldi	r25, 0x9B	; 155
 10c:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = 0b00000010;   // Enable the OCR0A interrupt 
 10e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

    sei();   // Enable interrupts
 112:	78 94       	sei
 114:	0f 2e       	mov	r0, r31
 116:	f6 e0       	ldi	r31, 0x06	; 6
 118:	df 2e       	mov	r13, r31
 11a:	f0 2d       	mov	r31, r0
 11c:	0f 2e       	mov	r0, r31
 11e:	f5 e0       	ldi	r31, 0x05	; 5
 120:	ef 2e       	mov	r14, r31
 122:	f0 2d       	mov	r31, r0
 124:	68 94       	set
 126:	ff 24       	eor	r15, r15
 128:	f2 f8       	bld	r15, 2
 12a:	03 e0       	ldi	r16, 0x03	; 3
 12c:	12 e0       	ldi	r17, 0x02	; 2
 12e:	d1 e0       	ldi	r29, 0x01	; 1
 130:	c2 e3       	ldi	r28, 0x32	; 50
 132:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <LEDDelay>
 136:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <LEDState>

    while (1) 
    {
        if (t10msFlag == 1) {
 13a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x38>
            t10msFlag = 0;
 142:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>

            if(LEDDelay-- == 0) {
 146:	91 11       	cpse	r25, r1
 148:	08 c0       	rjmp	.+16     	; 0x15a <main+0x58>
                LEDDelay = BLINK_DELAY;

                if (++LEDState == maxLEDState) {
 14a:	2f 5f       	subi	r18, 0xFF	; 255
 14c:	27 30       	cpi	r18, 0x07	; 7
 14e:	39 f4       	brne	.+14     	; 0x15e <main+0x5c>
 150:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <LEDDelay>
                    LEDState = LEDState0;     
 154:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <LEDState>
 158:	10 c0       	rjmp	.+32     	; 0x17a <main+0x78>
    while (1) 
    {
        if (t10msFlag == 1) {
            t10msFlag = 0;

            if(LEDDelay-- == 0) {
 15a:	91 50       	subi	r25, 0x01	; 1
 15c:	01 c0       	rjmp	.+2      	; 0x160 <main+0x5e>
                LEDDelay = BLINK_DELAY;
 15e:	92 e3       	ldi	r25, 0x32	; 50

            else {
                LEDDelay--;
            }
            */
        	switch(LEDState) {
 160:	e2 2f       	mov	r30, r18
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	e7 30       	cpi	r30, 0x07	; 7
 166:	f1 05       	cpc	r31, r1
 168:	40 f7       	brcc	.-48     	; 0x13a <main+0x38>
 16a:	ec 5c       	subi	r30, 0xCC	; 204
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__tablejump2__>
 172:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <LEDDelay>
 176:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <LEDState>
        		case LEDState0:
        		LED0();
 17a:	0e 94 69 00 	call	0xd2	; 0xd2 <LED0>
        		break;
 17e:	d9 cf       	rjmp	.-78     	; 0x132 <main+0x30>
 180:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <LEDDelay>
 184:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <LEDState>
        		case LEDState1:
        		LED1();
 188:	0e 94 6e 00 	call	0xdc	; 0xdc <LED1>
        		break;
 18c:	d2 cf       	rjmp	.-92     	; 0x132 <main+0x30>
 18e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <LEDDelay>
 192:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <LEDState>
        		case LEDState2:
        		LED2();
 196:	0e 94 71 00 	call	0xe2	; 0xe2 <LED2>
        		break;
 19a:	cb cf       	rjmp	.-106    	; 0x132 <main+0x30>
 19c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <LEDDelay>
 1a0:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <LEDState>
        		case LEDState3:
        		LED3();
 1a4:	0e 94 76 00 	call	0xec	; 0xec <LED3>
        		break;
 1a8:	c4 cf       	rjmp	.-120    	; 0x132 <main+0x30>
 1aa:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <LEDDelay>
 1ae:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <LEDState>
        		case LEDState4:
        		LED4();
 1b2:	0e 94 79 00 	call	0xf2	; 0xf2 <LED4>
        		break;
 1b6:	bd cf       	rjmp	.-134    	; 0x132 <main+0x30>
 1b8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <LEDDelay>
 1bc:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <LEDState>
        		case LEDState5:
        		LED5();
 1c0:	0e 94 7e 00 	call	0xfc	; 0xfc <LED5>
        		break;
 1c4:	b6 cf       	rjmp	.-148    	; 0x132 <main+0x30>
 1c6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <LEDDelay>
 1ca:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <LEDState>
	PORTD |= (1 << PORTD2);
	PORTD &= ~(1 << PORTD4);
}

void OFFLED() {
	PORTD = 0x00;
 1ce:	1b b8       	out	0x0b, r1	; 11
 1d0:	b0 cf       	rjmp	.-160    	; 0x132 <main+0x30>

000001d2 <__tablejump2__>:
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	05 90       	lpm	r0, Z+
 1d8:	f4 91       	lpm	r31, Z
 1da:	e0 2d       	mov	r30, r0
 1dc:	09 94       	ijmp

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
